{"dependencies":[],"generated":{"js":"\r\nvar Note = React.createClass({\r\n    getInitialState() {\r\n        return {editing: false}\r\n    },\r\n    componentWillMount() {\r\n        this.style = {\r\n            right: 80\r\n        }\r\n    },\r\n    componentDidUpdate() {\r\n        if (this.state.editing) {\r\n            this.refs.newText.focus()\r\n            this.refs.newText.select()\r\n        }\r\n    },\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.children !== nextProps.children || this.state !== nextState\r\n    },\r\n    edit() {\r\n        this.setState({editing: true})\r\n    },\r\n    save() {\r\n        this.props.onChange(this.refs.newText.value, this.props.id)\r\n        this.setState({editing: false})\r\n    },\r\n    remove() {\r\n        this.props.onRemove(this.props.id)\r\n    },\r\n    renderForm() {\r\n        return (\r\n            <div className=\"note\" \r\n                 style={this.style}>\r\n              <textarea ref=\"newText\"\r\n                        defaultValue={this.props.children}>\r\n              </textarea>\r\n              <button onClick={this.save}>SAVE</button>\r\n            </div>\r\n        )\r\n    },\r\n    renderDisplay() {\r\n        return ( \r\n            <div className=\"note\"\r\n                 style={this.style}>\r\n                <p>{this.props.children}</p>\r\n                <span>\r\n                  <button onClick={this.edit}>EDIT</button>\r\n                  <button onClick={this.remove}>X</button>\r\n                </span>\r\n            </div>\r\n            )\r\n    },\r\n    render() {\r\n      return ( <ReactDraggable>\r\n               {(this.state.editing) ? this.renderForm()\r\n                                  : this.renderDisplay()}\r\n               </ReactDraggable>\r\n        )\r\n\r\n    }\r\n})\r\n\r\nvar Board = React.createClass({\r\n    propTypes: {\r\n        count: function(props, propName) {\r\n            if(typeof props[propName] !== \"number\") {\r\n                return new Error(\"the count must be a number\")\r\n            } \r\n\r\n            if(props[propName] > 100) {\r\n                return new Error('Creating ' + props[propName] + ' notes is ridiculous')\r\n            }\r\n        }\r\n    },\r\n    getInitialState() {\r\n        return {\r\n            notes: []\r\n        }\r\n    },\r\n    componentWillMount() {\r\n        let  objData = window.noteData;\r\n        for (let i=0; i<objData.length; i++){\r\n            this.add(objData[i].content);\r\n        }\r\n    },\r\n    nextId() {\r\n        this.uniqueId = this.uniqueId || 0\r\n        return this.uniqueId++\r\n    },\r\n    add(text) {\r\n        var notes = [\r\n            ...this.state.notes,\r\n            {\r\n                id: this.nextId(),\r\n                note: text\r\n            }\r\n        ]\r\n        this.setState({notes})\r\n    },\r\n    update(newText, id) {\r\n        var notes = this.state.notes.map(\r\n            note => (note.id !== id) ?\r\n               note : \r\n                {\r\n                    ...note, \r\n                    note: newText\r\n                }\r\n            )\r\n        this.setState({notes})\r\n    },\r\n    remove(id) {\r\n        var notes = this.state.notes.filter(note => note.id !== id)\r\n        this.setState({notes})\r\n    },\r\n    eachNote(note) {\r\n        return (<Note key={note.id}\r\n                      id={note.id}\r\n                      onChange={this.update}\r\n                      onRemove={this.remove}>\r\n                  {note.note}\r\n                </Note>)\r\n    },\r\n    render() {\r\n        return (<div className='board'>\r\n                   {this.state.notes.map(this.eachNote)}\r\n                   <button onClick={() => this.add('New Note')}>+</button>\r\n                </div>)\r\n    }\r\n})\r\n\r\nReactDOM.render(<Board count={50}/>, \r\n    document.getElementById('react-container'))"},"hash":"17950e6b7f708bf25a6cc5db467cfefb"}